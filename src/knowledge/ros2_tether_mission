# Modelfile generated by "ollama show"
# To build a new Modelfile based on this, replace FROM with:
FROM qwen3:14b

FROM /usr/share/ollama/.ollama/models/blobs/sha256-a8cc1361f3145dc01f6d77c6c82c9116b9ffe3c97b34716fe20418455876c40e
TEMPLATE """{{- if .Messages }}
{{- if or .System .Tools }}<|im_start|>system
{{- if .System }}
{{ .System }}
{{- end }}
{{- if .Tools }}

# Tools

You may call one or more functions to assist with the user query.

You are provided with function signatures within <tools></tools> XML tags:
<tools>
{{- range .Tools }}
{"type": "function", "function": {{ .Function }}}
{{- end }}
</tools>

For each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:
<tool_call>
{"name": <function-name>, "arguments": <args-json-object>}
</tool_call>
{{- end }}<|im_end|>
{{ end }}
{{- range $i, $_ := .Messages }}
{{- $last := eq (len (slice $.Messages $i)) 1 -}}
{{- if eq .Role "user" }}<|im_start|>user
{{ .Content }}<|im_end|>
{{ else if eq .Role "assistant" }}<|im_start|>assistant
{{ if .Content }}{{ .Content }}
{{- else if .ToolCalls }}<tool_call>
{{ range .ToolCalls }}{"name": "{{ .Function.Name }}", "arguments": {{ .Function.Arguments }}}
{{ end }}</tool_call>
{{- end }}{{ if not $last }}<|im_end|>
{{ end }}
{{- else if eq .Role "tool" }}<|im_start|>user
<tool_response>
{{ .Content }}
</tool_response><|im_end|>
{{ end }}
{{- if and (ne .Role "assistant") $last }}<|im_start|>assistant
{{ end }}
{{- end }}
{{- else }}
{{- if .System }}<|im_start|>system
{{ .System }}<|im_end|>
{{ end }}{{ if .Prompt }}<|im_start|>user
{{ .Prompt }}<|im_end|>
{{ end }}<|im_start|>assistant
{{ end }}{{ .Response }}{{ if .Response }}<|im_end|>{{ end }}"""
PARAMETER repeat_penalty 1
PARAMETER stop <|im_start|>
PARAMETER stop <|im_end|>
PARAMETER temperature 0.6
PARAMETER top_k 20
PARAMETER top_p 0.95
SYSTEM """You are an expert in marine motion planning.

From the information you MUST understand the correct movement for the ASV (x_B, y_B).

Given the ASV position as boat_pos with coordinates x_B and y_B, total tether length L equal to four meters, and mandatory AUV depth z_A fixed at z_A_min = minus one point five meters, compute the AUV position as x_A, y_A, z_A so that the cable hangs in a true catenary of length L. Proceed as follows:

Set dz equal to z_A_min minus z_B.

Fix the catenary stiffness parameter a to L divided by ten.

Let D be the horizontal span (greater than zero) and c be the catenary horizontal offset (greater than half of D).

Impose the two catenary endpoint conditions:
– a multiplied by the difference of the hyperbolic cosine of (D minus c) over a and the hyperbolic cosine of c over a equals dz
– a multiplied by the sum of the hyperbolic sine of (D minus c) over a and the hyperbolic sine of c over a equals L

Solve those two equations simultaneously for D and c, using scipy.optimize.fsolve with initial guesses D0 = L/2 and c0 = D0/2.

Finally compute x_A as x_B plus D, y_A as y_B, and z_A as z_A_min.


You MUST return only values of AUV postions. Not program.
Your response MUST follow this format:

position ASV: x_A, y_A
position AUV: x_B, y_B, z_B

You MUST not provide any additional information beyond this format.

"""


